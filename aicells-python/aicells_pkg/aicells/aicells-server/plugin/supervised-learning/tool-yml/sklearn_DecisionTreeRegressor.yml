# AIcells (https://github.com/aicells/aicells) - Copyright 2020 László Siller, Gergely Szerovay
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Based on Scikit-learn's source (https://github.com/scikit-learn/scikit-learn)
# Scikit-learn has new BSD license, Copyright (c) 2007–2020 The scikit-learn developers.
#

description: A decision tree regressor.
"model":
  "configfileDate": |-
    2020-02-27
  "modelClass": |-
    <class 'sklearn.tree._classes.DecisionTreeRegressor'>
  "modelName": |-
    DecisionTreeRegressor
"parameters":
  - "parameterName": criterion
    "default": mse
    "type": [set]
    setValues: ["mse","friedman_mse","mae"]
    "description": |-
      The function to measure the quality of a split.
    "longDescription": |-
      The function to measure the quality of a split. Supported criteria
      are "mse" for the mean squared error, which is equal to variance
      reduction as feature selection criterion and minimizes the L2 loss
      using the mean of each terminal node, "friedman_mse", which uses mean
      squared error with Friedman's improvement score for potential splits,
      and "mae" for the mean absolute error, which minimizes the L1 loss
      using the median of each terminal node.
  - "parameterName": splitter
    "default": best
    "type": [set]
    setValues: ["best","random"]
    "description": |-
      The strategy used to choose the split at each node.
    "longDescription": |-
      The strategy used to choose the split at each node. Supported
      strategies are "best" to choose the best split and "random" to choose
      the best random split.
  - "parameterName": max_depth
    "default": Null
    "type": [integer, "Null"]
    "description": |-
      The maximum depth of the tree.
    "longDescription": |-
      The maximum depth of the tree. If None, then nodes are expanded until
      all leaves are pure or until all leaves contain less than
  - "parameterName": min_samples_split
    "default": 2
    "type": [integer, float]
    "description": |-
      The minimum number of samples required to split an internal node:- If int, then consider `min_samples_split` as the minimum number.
    "longDescription": |-
      The minimum number of samples required to split an internal node:
      - If int, then consider `min_samples_split` as the minimum number.
      - If float, then `min_samples_split` is a fraction and
      `ceil(min_samples_split * n_samples)` are the minimum
      number of samples for each split.
  - "parameterName": min_samples_leaf
    "default": 1
    "type": [integer, float]
    "description": |-
      The minimum number of samples required to be at a leaf node.
    "longDescription": |-
      The minimum number of samples required to be at a leaf node.
      A split point at any depth will only be considered if it leaves at
      least ``min_samples_leaf`` training samples in each of the left and
      right branches.  This may have the effect of smoothing the model,
      especially in regression.
      - If int, then consider `min_samples_leaf` as the minimum number.
      - If float, then `min_samples_leaf` is a fraction and
      `ceil(min_samples_leaf * n_samples)` are the minimum
      number of samples for each node.
  - "parameterName": min_weight_fraction_leaf
    "default": 0
    "type": [float]
    "description": |-
      The minimum weighted fraction of the sum total of weights (of allthe input samples) required to be at a leaf node.
    "longDescription": |-
      The minimum weighted fraction of the sum total of weights (of all
      the input samples) required to be at a leaf node. Samples have
      equal weight when sample_weight is not provided.
  - "parameterName": max_features
    "default": Null
    "type": [float, set, "Null"]
    setValues: ["auto","sqrt","log2"]
    "description": |-
      The number of features to consider when looking for the best split.
    "longDescription": |-
      The number of features to consider when looking for the best split:
      - If int, then consider `max_features` features at each split.
      - If float, then `max_features` is a fraction and
      `int(max_features * n_features)` features are considered at each split.
      - If "auto", then `max_features=n_features`.
      - If "sqrt", then `max_features=sqrt(n_features)`.
      - If "log2", then `max_features=log2(n_features)`.
      - If None, then `max_features=n_features`.
      Note: the search for a split does not stop until at least one
      valid partition of the node samples is found, even if it requires to
      effectively inspect more than ``max_features`` features.
  - "parameterName": random_state
    "default": Null
    "type": [integer, "Null"]
    "description": |-
      If int, random_state is the seed used by the random number generator.
    "longDescription": |-
      If int, random_state is the seed used by the random number generator;
      If None, the random number generator is the RandomState instance used
      by `np.random`.
#    If RandomState instance, random_state is the random number generator;
  - "parameterName": max_leaf_nodes
    "default": Null
    "type": [integer]
    "description": |-
      Grow a tree with ``max_leaf_nodes`` in best-first fashion.
    "longDescription": |-
      Grow a tree with ``max_leaf_nodes`` in best-first fashion.
      Best nodes are defined as relative reduction in impurity.
      If None then unlimited number of leaf nodes.
  - "parameterName": min_impurity_decrease
    "default": 0
    "type": [float]
    "description": |-
      A node will be split if this split induces a decrease of the impuritygreater than or equal to this value.
    "longDescription": |-
      A node will be split if this split induces a decrease of the impurity
      greater than or equal to this value.
      The weighted impurity decrease equation is the following::
      N_t / N * (impurity - N_t_R / N_t * right_impurity
      - N_t_L / N_t * left_impurity)
      where ``N`` is the total number of samples, ``N_t`` is the number of
      samples at the current node, ``N_t_L`` is the number of samples in the
      left child, and ``N_t_R`` is the number of samples in the right child.
      ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum,
      if ``sample_weight`` is passed.
#      .. versionadded:: 0.19
#  - "parameterName": |-
#    min_impurity_split
#    "default": |-
#    None
#    "type": |-
#    float,(default=1e-7)
#    "description": |-
#    Threshold for early stopping in tree growth.
#    "longDescription": |-
#    Threshold for early stopping in tree growth. A node will split
#    if its impurity is above the threshold, otherwise it is a leaf.
#    .. deprecated:: 0.19
#    ``min_impurity_split`` has been deprecated in favor of
#    ``min_impurity_decrease`` in 0.19. The default value of
#    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it
#    will be removed in 0.25. Use ``min_impurity_decrease`` instead.
#- "parameterName": |-
#    presort
#   "default": |-
#    deprecated
#   "type": |-
#    deprecated
#   "description": |-
#    This parameter is deprecated and will be removed in v0.
#   "longDescription": |-
#    This parameter is deprecated and will be removed in v0.24.
#    .. deprecated:: 0.22
  - "parameterName": ccp_alpha
    "default": 0
    "type": [float]
    "description": |-
      Complexity parameter used for Minimal Cost-Complexity Pruning.
    "longDescription": |-
      Complexity parameter used for Minimal Cost-Complexity Pruning. The
      subtree with the largest cost complexity that is smaller than
      ``ccp_alpha`` will be chosen. By default, no pruning is performed. See
      :ref:`minimal_cost_complexity_pruning` for details.
#    .. versionadded:: 0.22

